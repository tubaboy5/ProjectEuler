/*
Problem:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Theory:
Find values of Fibonacci sequence
num1 = 0
num2 = 1
sum of nums = 1

num1 = 1
num2 = 1
sum of nums = 2

num1 = 1
num2 = 2
sum of nums = 3

num1 + num2 = sum of nums
1 + 2 = 3

num1 = num2
num1 = 2
num2 = sum of nums
num2 = 3

num1 + num2 = sum of nums
2 + 3 = 5

num1 = num2
num1 = 3
num2 = sum of nums
num2 = 5

num1 + num2 = sum of nums
3 + 5 = 8

Find first 50 instances of Fibonacci Sequence

Ensure that the final value is greater than 4,000,000

Exclude all values above 4,000,000
fib > 4,000,000

Find all the values that are even
(fib%2==0)

Add all those together
*/


import java.util.ArrayList;

public class ProjectEuler2 {
    public static void main(String[] args) {
        int count = 35;
        int num1 = 0;
        int num2 = 1;
        int fibonacciSum = 0;

        ArrayList<Integer> fibonacciSequence = new ArrayList<>();
        ArrayList<Integer> evenFibonacciSequence = new ArrayList<>();

        for (int i = 1; i <= count; ++i) {
            int sumOfPrevTwo = num1 + num2;
            num1 = num2;
            num2 = sumOfPrevTwo;
            if(num1 < 4000000) {
                fibonacciSequence.add(num1);
            }
        }
        for (Integer evenNumber : fibonacciSequence) {
            if (evenNumber % 2 == 0) {
                evenFibonacciSequence.add(evenNumber);
            }
        }
        for (Integer adding : evenFibonacciSequence) {
            fibonacciSum += adding;
        }
       System.out.println("The sum of all the even integers in a fibonacci sequence that are under 4,000,000 is: " + fibonacciSum);
    }
}
